#include <iostream>#include "work.h"using std::endl;using std::cout;using std::cin;//void callme1(StringBad& t);//void callme2(StringBad t);//int main()//{//	cout << "starting an inner block." << endl;////	StringBad headline1("Celetwde adwa daw awda");//	StringBad headline2("Dwonver dwino mncv pqhjxa");//	StringBad headline3("ASpdoj dai woqn xzoqmodw");//	//赋值运算符的重载//	StringBad t;//	t = headline1;//	callme1(t);//	//显示复制构造函数//	StringBad ttemp = StringBad(headline2);//	//StringBad ttemp{headline2};////	cout << "headline1: " << headline1 << endl;//	cout << "headline2: " << headline2 << endl;//	cout << "headline3: " << headline3 << endl;//	cout << "headline4: " << t << endl;//	cout << "headline5: " << ttemp << endl;////	callme1(headline1);//	callme1(headline2);//	callme1(headline3);//	callme2(t);//	callme2(headline1);//	callme2(headline2);//	////	return 0;//}//void callme1(StringBad& t)//{//	cout << "String passed by reference: ";//	cout << "		\"" << t << "\"" << endl;//}////void callme2(StringBad t)//{//	cout << "String passed by value: ";//	cout << "		\"" << t << "\"" << endl;////}///*完善的string类*///const int ArSize = 10;//const int MAX_SIZE = 80;	//字符串最大长度//int main()//{//	String name;//	cout << "你好! 你叫什么名字?";//	cin >> name;//	//	cout << "欢迎你! " << name << endl;//	cout << "请你输入最多10个字符串,找出最短字段字符串: ";//	String sayings[ArSize];//	int i;					//寻找的下标//	char temp[MAX_SIZE];	//临时输入字符串////	for (i = 0; i < ArSize; i++)//	{//		cout << "请输入第" << i + 1 << "个字符串: ";//		cin.get(temp, MAX_SIZE);//		while (cin && cin.get() != '\n')//			;//		if (!cin || temp[0] == '\0')//			break;			//遇到空行结束输入//		else//		{//			sayings[i] = temp;	//重载 =运算符//		}//	}//	int total = i;			//统计输入的次数//	if (total > 0)//	{//		cout << "这是你输入的字符串: " << endl;//		for (int i = 0; i < total; i++)//		{//			cout << sayings[i][0] << ": " << sayings[i] << endl;//		}////		int shortest = 0;//		int first = 0;//		for (i = 1; i < total; i++)//		{//			if (sayings[i].length() < sayings[shortest].length())//			{//				shortest = i;	//找到最短的字符串//			}//			if (sayings[i]< sayings[first])//			{//				first = i;		//找到最小的字符串//			}//		}//		cout << "最短的字符串: " << sayings[shortest] << endl;//		cout << "最小的字符串: " << sayings[first] << endl;//		cout << "这是第" << String::HowMany() << "个对象" << endl;//	}//	else//	{//		cout << "你没有任何输入!" << endl;//	}////	return 0;//}/*构造函数中使用new的注意事项:	1.多个构造函数必须以同样的方式使用new  同时析构函数需要带[]括号	2.应定义一个复制构造函数  通过深度复制 将一个对象初始化为另一个对象		String::String(const String& t)		{			num_strings++;			//静态类对象增加			len = t.len;			//字符串长度相同			str = new char[len + 1];//开辟空间			std::strcpy(str, t.str);//字符串拷贝		}	3.应定义一个赋值运算符    通过深度复制 将一个对象复制为另一个对象		String& String::operator=(const String& t)		{			if (this == &t)				return *this;	//不能给其自身重新赋值			delete[]str;		//清除其原来的数据			len = std::strlen(t.str);			str = new char[len + 1];			std::strcpy(str, t.str);			return *this;		}	*//*再谈new和delete*///const int ArSize = 10;//const int MAX_SIZE = 80;	//字符串最大长度//int main()//{//	String name;//	cout << "你好! 你叫什么名字?";//	cin >> name;//	//	cout << "欢迎你! " << name << endl;//	cout << "请你输入最多10个字符串,找出最短字段字符串: ";//	String sayings[ArSize];//	int i;					//寻找的下标//	char temp[MAX_SIZE];	//临时输入字符串////	for (i = 0; i < ArSize; i++)//	{//		cout << "请输入第" << i + 1 << "个字符串: ";//		cin.get(temp, MAX_SIZE);//		while (cin && cin.get() != '\n')//			;//		if (!cin || temp[0] == '\0')//			break;			//遇到空行结束输入//		else//		{//			sayings[i] = temp;	//重载 =运算符//		}//	}//	int total = i;			//统计输入的次数//	if (total > 0)//	{//		cout << "这是你输入的字符串: " << endl;//		for (int i = 0; i < total; i++)//		{//			cout << sayings[i][0] << ": " << sayings[i] << endl;//		}////		//创建一个指针指向最短的字符串//		String* shortest = &sayings[0];//		String* first = &sayings[0];//		for (i = 1; i < total; i++)//		{//			if (sayings[i].length() < shortest->length())//			{//				shortest = &sayings[i];		//找到最短的字符串//			}//			if (sayings[i]<*first)//			{//				first = &sayings[i];				//找到最小的字符串//			}//		}//		cout << "最短的字符串: " << *shortest << endl;//		cout << "最小的字符串: " << *first << endl;////		srand(time(0));//		int choice = rand() % total;//		//调用复制构造函数创建新对象//		String* favourite = new String(sayings[choice]);//		cout << "我最喜欢的对象是: "<<*favourite<< endl;//	}//	else//	{//		cout << "你没有任何输入!" << endl;//	}////	return 0;//}/*new定位运算符*/const int BUF = 521;int main(){	char* buffer = new char[BUF];	justTesting* pc1, * pc2;	pc1 = new (buffer) justTesting;	pc2 = new justTesting("Heap1", 20);	cout << "地址 buffer:" << (void*)buffer << "   heap: " << pc2 << endl;	cout << "Memory contents: " << endl;	cout << pc1 << ": ";	pc1->show();	cout << pc2 << ": ";	pc2->show();	justTesting* pc3, * pc4;	pc3 = new (buffer) justTesting("Bad Idea", 6);	pc4 = new justTesting("Heap2", 10);	cout << "Memory contents: " << endl;	cout << pc3 << ": ";	pc3->show();	cout << pc4 << ": ";	pc4->show();	delete pc2;	delete pc4;	delete[] buffer;	cout << "Bye!" << endl;	return 0;}